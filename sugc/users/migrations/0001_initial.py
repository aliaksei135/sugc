# Generated by Django 2.2.9 on 2020-02-23 11:44

import datetime

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models

import sugc.users.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Availability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='Time Added')),
                ('date_available',
                 models.DateField(unique=True, validators=[sugc.users.validators.not_in_past_validator],
                                  verbose_name='Available')),
            ],
            options={
                'verbose_name': 'Available Day',
                'verbose_name_plural': 'Availability',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=255, verbose_name='Full Name')),
                ('profile_img', models.ImageField(default='images/profile_default.jpg', upload_to='user_media/')),
                ('date_of_birth', models.DateField(default=datetime.date.today, verbose_name='Date of Birth')),
                ('is_driver', models.BooleanField(default=False, verbose_name='Is driver?')),
                ('on_waiting_list', models.BooleanField(default=True, verbose_name='On Waiting List?')),
                ('has_susu_membership', models.BooleanField(default=False, verbose_name='Has SUSU Membership?')),
                ('student_id', models.IntegerField(blank=True, null=True, verbose_name='Student ID Number')),
                ('is_solo', models.BooleanField(default=False, verbose_name='Solo?')),
                ('is_bronze', models.BooleanField(default=False, verbose_name='Bronze?')),
                ('is_xc', models.BooleanField(default=False, verbose_name='XC?')),
                ('availability', models.ManyToManyField(to='users.Availability')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
